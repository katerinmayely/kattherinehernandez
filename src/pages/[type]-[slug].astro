---
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import Image from 'astro/components/Image.astro';

export async function getStaticPaths() {
    const projectEntries = await getCollection('projects');
    const experienceEntries = await getCollection('experience');

    const allItems = [
        ...projectEntries.map((entry: any) => ({ ...entry, type: 'projects' })), // Agregar tipo "projects"
        ...experienceEntries.map((entry: any) => ({ ...entry, type: 'experience' })) // Agregar tipo "experience"
    ];

    return allItems.map(entry => ({
        params: { 
            slug: entry.slug,
            type: entry.type
        }, 
        props: { entry },
    }));
}

interface Props {
    entry: {
        slug: string;
        type: string;
        data: {
            title: string;
            header_text: string;
            src: string;
            alt: string;
        };
        render: () => Promise<{ Content: any}>;
    };
}

const { entry } = Astro.props;
const { Content} = await entry.render();

---

<BaseLayout showFooter={false} title={entry.data.title}>
    <div class="flex justify-center">
        <Image
            src={entry.data.src}
            alt={entry.data.alt}
            width={130}
            height={130}
            style="background-color:rgb(102, 56, 121); border-style: solid; box-shadow: 0 0 50px rgba(168, 85, 247, 0.7), 0 0 20px rgba(252, 165, 165, 0.5);"
            class="rounded-3xl mb-10"
        />
    </div>
    <div class="max-w-3xl mx-auto px-5 text-clear">
        <h1 class="text-xl font-bold text-big-letter mb-2 pt-0">{entry.data.header_text || 'Contenido no encontrado'}</h1>
        <div class="prose prose-big-letter lg:prose-lg max-w-none">
            <Content />
        </div>
    </div>
</BaseLayout>

<style is:global>
    .prose h1 { @apply text-base font-bold text-big-letter mb-4 mt-8; }
    .prose h2 { @apply text-base font-semibold text-big-letter mb-4 mt-8; }
    .prose h3 { @apply text-base font-semibold text-big-letter mb-3 mt-6; }
    .prose p { @apply mb-4 text-clear; }
    .prose ul { @apply list-disc list-inside mb-4; }
    .prose ol { @apply list-decimal list-inside mb-4; }
    .prose li { @apply mb-2; }
    .prose strong { @apply text-orange-900; }
    .prose a { @apply text-orange-600 hover:text-orange-800 underline; }
    .prose code { @apply bg-orange-100 text-orange-800 px-1 py-0.5 rounded; }
    .prose pre { @apply bg-gray-100 p-4 rounded-lg overflow-x-auto; }
    .prose pre code { @apply bg-transparent text-gray-800; }
    .prose blockquote { @apply border-l-4 border-orange-500 pl-4 italic text-gray-700; }
    .prose table { @apply w-full border-collapse border border-orange-200 mb-4; }
    .prose th, .prose td { @apply border border-orange-200 p-2; }
    .prose th { @apply bg-orange-100 font-semibold; }
</style>
